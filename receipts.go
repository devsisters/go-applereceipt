// Code generated by gen.go. DO NOT EDIT.
package applereceipt

import (
	"encoding/asn1"
	"time"
)

var (
	_ asn1.RawValue
	_ time.Time
)

type InAppPurchaseReceipt struct {
	// The number of items purchased.
	Quantity int
	// The product identifier of the item that was purchased.
	ProductIdentifier string
	// The transaction identifier of the item that was purchased.
	TransactionIdentifier string
	// For a transaction that restores a previous transaction, the transaction identifier of the original transaction. Otherwise, identical to the transaction identifier.
	OriginalTransactionIdentifier string
	// The date and time that the item was purchased.
	PurchaseDate time.Time
	// For a transaction that restores a previous transaction, the date of the original transaction.
	OriginalPurchaseDate time.Time
	// The expiration date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
	SubscriptionExpirationDate time.Time
	// For an auto-renewable subscription, whether or not it is in the introductory price period.
	SubscriptionIntroductoryPricePeriod int
	// For a transaction that was canceled by Apple customer support, the time and date of the cancellation. For an auto-renewable subscription plan that was upgraded, the time and date of the upgrade transaction.
	CancellationDate time.Time
	// The primary key for identifying subscription purchases.
	WebOrderLineItemID int

	// Undocumented attributes
	Remaining []ReceiptAttribute
}

func newInAppPurchaseReceipt(attrs []ReceiptAttribute) (InAppPurchaseReceipt, error) {
	var r InAppPurchaseReceipt
	for _, attr := range attrs {
		var err error
		switch attr.Type {
		case 1701:
			_, err = asn1.Unmarshal(attr.Value, &r.Quantity)
		case 1702:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.ProductIdentifier, "utf8")
		case 1703:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.TransactionIdentifier, "utf8")
		case 1705:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.OriginalTransactionIdentifier, "utf8")
		case 1704:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.PurchaseDate, err = time.Parse(time.RFC3339, s)
			}
		case 1706:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.OriginalPurchaseDate, err = time.Parse(time.RFC3339, s)
			}
		case 1708:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.SubscriptionExpirationDate, err = time.Parse(time.RFC3339, s)
			}
		case 1719:
			_, err = asn1.Unmarshal(attr.Value, &r.SubscriptionIntroductoryPricePeriod)
		case 1712:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.CancellationDate, err = time.Parse(time.RFC3339, s)
			}
		case 1711:
			_, err = asn1.Unmarshal(attr.Value, &r.WebOrderLineItemID)
		default:
			r.Remaining = append(r.Remaining, attr)
		}
		if err != nil {
			return r, err
		}
	}
	return r, nil
}

type AppReceipt struct {
	// The app’s bundle identifier.
	BundleIdentifier string
	// The app’s version number.
	AppVersion string
	// An opaque value used, with other data, to compute the SHA-1 hash during validation.
	OpaqueValue []byte
	// A SHA-1 hash, used to validate the receipt.
	SHA1Hash []byte
	// The receipt for an in-app purchase.
	InAppPurchaseReceipts []InAppPurchaseReceipt
	// The version of the app that was originally purchased.
	OriginalApplicationVersion string
	// The date when the app receipt was created.
	ReceiptCreationDate time.Time
	// The date that the app receipt expires.
	ReceiptExpirationDate time.Time

	// Undocumented attributes
	Remaining []ReceiptAttribute
}

func newAppReceipt(attrs []ReceiptAttribute) (AppReceipt, error) {
	var r AppReceipt
	for _, attr := range attrs {
		var err error
		switch attr.Type {
		case 2:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.BundleIdentifier, "utf8")
		case 3:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.AppVersion, "utf8")
		case 4:
			r.OpaqueValue = attr.Value
		case 5:
			r.SHA1Hash = attr.Value
		case 17:
			var attrs []ReceiptAttribute
			if _, err = asn1.UnmarshalWithParams(attr.Value, &attrs, "set"); err == nil {
				var iap InAppPurchaseReceipt
				iap, err = newInAppPurchaseReceipt(attrs)
				if err == nil {
					r.InAppPurchaseReceipts = append(r.InAppPurchaseReceipts, iap)
				}
			}
		case 19:
			_, err = asn1.UnmarshalWithParams(attr.Value, &r.OriginalApplicationVersion, "utf8")
		case 12:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.ReceiptCreationDate, err = time.Parse(time.RFC3339, s)
			}
		case 21:
			var s string
			if _, err = asn1.Unmarshal(attr.Value, &s); err == nil && s != "" {
				r.ReceiptExpirationDate, err = time.Parse(time.RFC3339, s)
			}
		default:
			r.Remaining = append(r.Remaining, attr)
		}
		if err != nil {
			return r, err
		}
	}
	return r, nil
}
